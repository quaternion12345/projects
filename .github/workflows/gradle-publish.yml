env:  # 환경 변수를 지정
  S3_BUCKET_NAME: freelec-springboot-quaternion-build 
  PROJECT_NAME: springboot-webservice
  CODE_DEPLOY_APP_NAME: freelec-springboot-webservice                    
  CODE_DEPLOY_GROUP_NAME: freelec-springboot-webservice-group

name: deploy # GitHub Action에서 보여질 이름을 지정

on:
  release:
    types: [push] # push시 자동으로 실행
  push:
    branches: [master] # master 브랜치에서 동작
    paths: "springboot-webservice/**" # push시 action이 수행되는 범위를 프로젝트 전체가 아닌 특정 디렉터리로 지정
  workflow_dispatch: # 수동으로도 실행이 가능


jobs:
  build: 
    runs-on: ubuntu-latest # 해당 스크립트를 작동할 OS환경 지정
    permissions: 
      contents: read 
      packages: write
    defaults:
      run:
        working-directory: "springboot-webservice" # 전체 프로젝트가 아닌 빌드할 영역을 프로젝트 내의 특정 디렉터리로 지정

    steps:
    - name: Checkout 
      uses: actions/checkout@v3  # 프로젝트 코드를 CheckOut  
      
    - name: Set up JDK 8 
      uses: actions/setup-java@v3 # Java 설치
      with:
        java-version: '8' 
        distribution: 'temurin' 
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew # gradlew에 실행 권한 부여
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean build -x test # gradlew로 빌드
      shell: bash
      
    - name: Get current time
      uses: 1466587594/get-current-time@v2  # KST로 시간대 설정
      id: current-time
      with:
        format: YYYY-MM-DDTHH-mm-ss 
        utcOffset: "+09:00"

    - name: Show Current Time
      run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}" # 시간 포맷 설정
      shell: bash

    - name: Generate deployment package
      run: |
        mkdir -p before-deploy # zip에 포함시킬 파일들을 담을 디렉토리
        cp scripts/*.sh before-deploy/
        cp appspec.yml before-deploy/
        cp build/libs/*.jar before-deploy/
        cd before-deploy && zip -r before-deploy *
        cd ../ && mkdir -p deploy
        mv before-deploy/before-deploy.zip deploy/$PROJECT_NAME.zip
      shell: bash    

    - name: Make zip file
      run: zip -r ./$PROJECT_NAME.zip . # 빌드된 전체 폴더를 압축
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1  # aws에 해당 키 값으로 접속을 진행
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./deploy/$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$PROJECT_NAME.zip    # S3에 zip파일을 저장
      
    - name: Code Deploy
      run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODE_DEPLOY_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$PROJECT_NAME.zip    # 배포 그룹으로 애플리케이션 전송
